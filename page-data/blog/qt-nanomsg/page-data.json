{"componentChunkName":"component---src-templates-page-js","path":"/blog/qt-nanomsg","webpackCompilationHash":"","result":{"data":{"markdownRemark":{"frontmatter":{"title":"玩具项目之Qt+nanomsg","date":"Fri, 14th July 2017","tags":["Qt","nanomsg","socket"],"thumbnail":null},"html":"<p><a href=\"http://nanomsg.org/\">nanomsg</a>很优秀，Qt也很优秀，今天我尝试把他们粘在一块。</p>\n<blockquote>\n<p>实现一个端对端通信的程序。一边是数据生产方，不停的生产图片地址和描述信息，一端是数据消费端，从解析到的网络地址下载图片，连同描述信息一块呈现出来。</p>\n</blockquote>\n<!-- more -->\n<p>代码见github：<a href=\"https://github.com/cymatics1717/imageSwitcher\">https://github.com/cymatics1717/imageSwitcher</a> ，这两个方案分别对应的是master 和nanomsg分支。</p>\n<ul>\n<li>使用Qt的QGraphicsView/QGraphicsScene 画图呈现，并用QPropertyAnimation实现了最简单的动画。</li>\n<li>下载图片用 QNetworkAccessManager，【网上很多人喜欢为每个请求单开一个线程的做法是很糟糕的】。</li>\n<li>nanomsg 通信单开一个线程。将backEnd对象 moveToThread即可。【 网上大量的通过派生QThread的方式也是很糟糕的】</li>\n</ul>\n<hr>\n<p>图片源都是puffin的各种表情包，show一下：\n<a href=\"http://www.stevenround-birdphotography.com/Puffin.htm\">http://www.stevenround-birdphotography.com/Puffin.htm</a>\n<img src=\"http://www.stevenround-birdphotography.com/source/image/puffin-06.jpg\" alt=\"image.png\"></p>\n<p>用来测试的数据生产端采用Nodejs实现。正好练练手，玩玩net模块的tcp能力。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">var net = require(&#39;net&#39;);\n\nvar HOST = &#39;127.0.0.1&#39;;\nvar PORT = 11111;\nvar cnt = 1;\n\n\nvar client = new net.Socket();\nclient.connect(PORT, HOST, function() {\n    console.log(&#39;CONNECTED TO: &#39; + HOST + &#39;:&#39; + PORT);\n    client.write(&#39;I am wayne, from NodeJS !&#39;);\n});\n\nclient.on(&#39;data&#39;, function(data) {\n    console.log(&#39;DATA: &#39; + data);\n});\n\nclient.on(&#39;error&#39;, function() {\n    console.log(&#39;error: &#39; );\n    client.destroy();\n});\n\nclient.on(&#39;close&#39;, function() {\n    console.log(&#39;Connection closed&#39;);\n});\n\nfunction intervalFunc() {\n\tdata={&quot;url&quot;:&quot;&quot;,&quot;desc&quot;:&quot;&quot;};\n\ttmp = (&quot;0&quot; + cnt++).slice(-2);\n\tdata[&quot;url&quot;]=&quot;http://www.stevenround-birdphotography.com/source/image/puffin-&quot;\n\t\t+ tmp +&quot;.jpg&quot;;\n\tdata[&quot;desc&quot;] = &quot;from node js&quot;+tmp \n\tclient.write(JSON.stringify(data));\n\tconsole.log(&#39;send data: &#39;+JSON.stringify(data));\n}\n\nsetInterval(intervalFunc, 2000);</code></pre></div>\n<p>对比一下，同样的功能，nanomsg:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">var nano = require(&#39;nanomsg&#39;);\n\n\n// var rep = nano.socket(&#39;rep&#39;);\nvar pair = nano.socket(&#39;pair&#39;);\n\nvar addr = &#39;tcp://127.0.0.1:11111&#39;;\nvar cnt = 1;\n\npair.connect(addr);\n\npair.on(&#39;data&#39;, function (buf) {\n  console.log(&#39;received response: &#39;, buf.toString());\n  // req.close();\n});\n\nfunction intervalFunc() {\n\tdata={&quot;url&quot;:&quot;&quot;,&quot;desc&quot;:&quot;&quot;};\n\ttmp = (&quot;0&quot; + cnt++).slice(-2);\n\tdata[&quot;url&quot;]=&quot;http://www.stevenround-birdphotography.com/source/image/puffin-&quot;\n\t\t+ tmp +&quot;.jpg&quot;;\n\tdata[&quot;desc&quot;] = &quot;from node js&quot;+tmp \n\tpair.send(JSON.stringify(data));\n\n\tconsole.log(&#39;send data: &#39;+JSON.stringify(data));\n}\n\nsetInterval(intervalFunc, 2000);</code></pre></div>","fields":{"slug":"qt-nanomsg"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"qt-nanomsg"}}}